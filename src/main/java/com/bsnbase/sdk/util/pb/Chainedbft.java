// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chainedbft.proto

package com.bsnbase.sdk.util.pb;

public final class Chainedbft {
  private Chainedbft() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }
  /**
   * <pre>
   * QCState is the phase of hotstuff
   * </pre>
   *
   * Protobuf enum {@code pb.QCState}
   */
  public enum QCState
      implements com.google.protobuf.Internal.EnumLite {
    /**
     * <code>NEW_VIEW = 0;</code>
     */
    NEW_VIEW(0),
    /**
     * <code>PREPARE = 1;</code>
     */
    PREPARE(1),
    /**
     * <code>PRE_COMMIT = 2;</code>
     */
    PRE_COMMIT(2),
    /**
     * <code>COMMIT = 3;</code>
     */
    COMMIT(3),
    /**
     * <code>DECIDE = 4;</code>
     */
    DECIDE(4),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>NEW_VIEW = 0;</code>
     */
    public static final int NEW_VIEW_VALUE = 0;
    /**
     * <code>PREPARE = 1;</code>
     */
    public static final int PREPARE_VALUE = 1;
    /**
     * <code>PRE_COMMIT = 2;</code>
     */
    public static final int PRE_COMMIT_VALUE = 2;
    /**
     * <code>COMMIT = 3;</code>
     */
    public static final int COMMIT_VALUE = 3;
    /**
     * <code>DECIDE = 4;</code>
     */
    public static final int DECIDE_VALUE = 4;


    public final int getNumber() {
      return value;
    }

    /**
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @Deprecated
    public static QCState valueOf(int value) {
      return forNumber(value);
    }

    public static QCState forNumber(int value) {
      switch (value) {
        case 0: return NEW_VIEW;
        case 1: return PREPARE;
        case 2: return PRE_COMMIT;
        case 3: return COMMIT;
        case 4: return DECIDE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<QCState>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        QCState> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<QCState>() {
            public QCState findValueByNumber(int number) {
              return QCState.forNumber(number);
            }
          };

    private final int value;

    private QCState(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:pb.QCState)
  }

  public interface QuorumCertOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.QuorumCert)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The id of Proposal this QC certified.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    com.google.protobuf.ByteString getProposalId();

    /**
     * <pre>
     * The msg of Proposal this QC certified. 
     * </pre>
     *
     * <code>optional bytes ProposalMsg = 2;</code>
     */
    com.google.protobuf.ByteString getProposalMsg();

    /**
     * <pre>
     * The current type of this QC certified.
     * the type contains `NEW_VIEW`, `PREPARE`
     * </pre>
     *
     * <code>optional .pb.QCState Type = 3;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * The current type of this QC certified.
     * the type contains `NEW_VIEW`, `PREPARE`
     * </pre>
     *
     * <code>optional .pb.QCState Type = 3;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.QCState getType();

    /**
     * <pre>
     * The view number of this QC certified.
     * </pre>
     *
     * <code>optional int64 ViewNumber = 4;</code>
     */
    long getViewNumber();

    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    boolean hasSignInfos();
    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos getSignInfos();
  }
  /**
   * <pre>
   * QuorumCert is a data type that combines a collection of signatures from replicas.
   * </pre>
   *
   * Protobuf type {@code pb.QuorumCert}
   */
  public  static final class QuorumCert extends
      com.google.protobuf.GeneratedMessageLite<
          QuorumCert, QuorumCert.Builder> implements
      // @@protoc_insertion_point(message_implements:pb.QuorumCert)
      QuorumCertOrBuilder {
    private QuorumCert() {
      proposalId_ = com.google.protobuf.ByteString.EMPTY;
      proposalMsg_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int PROPOSALID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString proposalId_;
    /**
     * <pre>
     * The id of Proposal this QC certified.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    public com.google.protobuf.ByteString getProposalId() {
      return proposalId_;
    }
    /**
     * <pre>
     * The id of Proposal this QC certified.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    private void setProposalId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      proposalId_ = value;
    }
    /**
     * <pre>
     * The id of Proposal this QC certified.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    private void clearProposalId() {
      
      proposalId_ = getDefaultInstance().getProposalId();
    }

    public static final int PROPOSALMSG_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString proposalMsg_;
    /**
     * <pre>
     * The msg of Proposal this QC certified. 
     * </pre>
     *
     * <code>optional bytes ProposalMsg = 2;</code>
     */
    public com.google.protobuf.ByteString getProposalMsg() {
      return proposalMsg_;
    }
    /**
     * <pre>
     * The msg of Proposal this QC certified. 
     * </pre>
     *
     * <code>optional bytes ProposalMsg = 2;</code>
     */
    private void setProposalMsg(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      proposalMsg_ = value;
    }
    /**
     * <pre>
     * The msg of Proposal this QC certified. 
     * </pre>
     *
     * <code>optional bytes ProposalMsg = 2;</code>
     */
    private void clearProposalMsg() {
      
      proposalMsg_ = getDefaultInstance().getProposalMsg();
    }

    public static final int TYPE_FIELD_NUMBER = 3;
    private int type_;
    /**
     * <pre>
     * The current type of this QC certified.
     * the type contains `NEW_VIEW`, `PREPARE`
     * </pre>
     *
     * <code>optional .pb.QCState Type = 3;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * The current type of this QC certified.
     * the type contains `NEW_VIEW`, `PREPARE`
     * </pre>
     *
     * <code>optional .pb.QCState Type = 3;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.QCState getType() {
      com.bsnbase.sdk.util.pb.Chainedbft.QCState result = com.bsnbase.sdk.util.pb.Chainedbft.QCState.forNumber(type_);
      return result == null ? com.bsnbase.sdk.util.pb.Chainedbft.QCState.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * The current type of this QC certified.
     * the type contains `NEW_VIEW`, `PREPARE`
     * </pre>
     *
     * <code>optional .pb.QCState Type = 3;</code>
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <pre>
     * The current type of this QC certified.
     * the type contains `NEW_VIEW`, `PREPARE`
     * </pre>
     *
     * <code>optional .pb.QCState Type = 3;</code>
     */
    private void setType(com.bsnbase.sdk.util.pb.Chainedbft.QCState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
    }
    /**
     * <pre>
     * The current type of this QC certified.
     * the type contains `NEW_VIEW`, `PREPARE`
     * </pre>
     *
     * <code>optional .pb.QCState Type = 3;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int VIEWNUMBER_FIELD_NUMBER = 4;
    private long viewNumber_;
    /**
     * <pre>
     * The view number of this QC certified.
     * </pre>
     *
     * <code>optional int64 ViewNumber = 4;</code>
     */
    public long getViewNumber() {
      return viewNumber_;
    }
    /**
     * <pre>
     * The view number of this QC certified.
     * </pre>
     *
     * <code>optional int64 ViewNumber = 4;</code>
     */
    private void setViewNumber(long value) {
      
      viewNumber_ = value;
    }
    /**
     * <pre>
     * The view number of this QC certified.
     * </pre>
     *
     * <code>optional int64 ViewNumber = 4;</code>
     */
    private void clearViewNumber() {
      
      viewNumber_ = 0L;
    }

    public static final int SIGNINFOS_FIELD_NUMBER = 5;
    private com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos signInfos_;
    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    public boolean hasSignInfos() {
      return signInfos_ != null;
    }
    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos getSignInfos() {
      return signInfos_ == null ? com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.getDefaultInstance() : signInfos_;
    }
    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    private void setSignInfos(com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos value) {
      if (value == null) {
        throw new NullPointerException();
      }
      signInfos_ = value;
      
      }
    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    private void setSignInfos(
        com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.Builder builderForValue) {
      signInfos_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    private void mergeSignInfos(com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos value) {
      if (signInfos_ != null &&
          signInfos_ != com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.getDefaultInstance()) {
        signInfos_ =
          com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.newBuilder(signInfos_).mergeFrom(value).buildPartial();
      } else {
        signInfos_ = value;
      }
      
    }
    /**
     * <pre>
     * SignInfos is the signs of the leader gathered from replicas
     * of a specifically certType.
     * </pre>
     *
     * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
     */
    private void clearSignInfos() {  signInfos_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!proposalId_.isEmpty()) {
        output.writeBytes(1, proposalId_);
      }
      if (!proposalMsg_.isEmpty()) {
        output.writeBytes(2, proposalMsg_);
      }
      if (type_ != com.bsnbase.sdk.util.pb.Chainedbft.QCState.NEW_VIEW.getNumber()) {
        output.writeEnum(3, type_);
      }
      if (viewNumber_ != 0L) {
        output.writeInt64(4, viewNumber_);
      }
      if (signInfos_ != null) {
        output.writeMessage(5, getSignInfos());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!proposalId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, proposalId_);
      }
      if (!proposalMsg_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, proposalMsg_);
      }
      if (type_ != com.bsnbase.sdk.util.pb.Chainedbft.QCState.NEW_VIEW.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(3, type_);
      }
      if (viewNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(4, viewNumber_);
      }
      if (signInfos_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, getSignInfos());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * QuorumCert is a data type that combines a collection of signatures from replicas.
     * </pre>
     *
     * Protobuf type {@code pb.QuorumCert}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert, Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.QuorumCert)
        com.bsnbase.sdk.util.pb.Chainedbft.QuorumCertOrBuilder {
      // Construct using com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The id of Proposal this QC certified.
       * </pre>
       *
       * <code>optional bytes ProposalId = 1;</code>
       */
      public com.google.protobuf.ByteString getProposalId() {
        return instance.getProposalId();
      }
      /**
       * <pre>
       * The id of Proposal this QC certified.
       * </pre>
       *
       * <code>optional bytes ProposalId = 1;</code>
       */
      public Builder setProposalId(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setProposalId(value);
        return this;
      }
      /**
       * <pre>
       * The id of Proposal this QC certified.
       * </pre>
       *
       * <code>optional bytes ProposalId = 1;</code>
       */
      public Builder clearProposalId() {
        copyOnWrite();
        instance.clearProposalId();
        return this;
      }

      /**
       * <pre>
       * The msg of Proposal this QC certified. 
       * </pre>
       *
       * <code>optional bytes ProposalMsg = 2;</code>
       */
      public com.google.protobuf.ByteString getProposalMsg() {
        return instance.getProposalMsg();
      }
      /**
       * <pre>
       * The msg of Proposal this QC certified. 
       * </pre>
       *
       * <code>optional bytes ProposalMsg = 2;</code>
       */
      public Builder setProposalMsg(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setProposalMsg(value);
        return this;
      }
      /**
       * <pre>
       * The msg of Proposal this QC certified. 
       * </pre>
       *
       * <code>optional bytes ProposalMsg = 2;</code>
       */
      public Builder clearProposalMsg() {
        copyOnWrite();
        instance.clearProposalMsg();
        return this;
      }

      /**
       * <pre>
       * The current type of this QC certified.
       * the type contains `NEW_VIEW`, `PREPARE`
       * </pre>
       *
       * <code>optional .pb.QCState Type = 3;</code>
       */
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <pre>
       * The current type of this QC certified.
       * the type contains `NEW_VIEW`, `PREPARE`
       * </pre>
       *
       * <code>optional .pb.QCState Type = 3;</code>
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <pre>
       * The current type of this QC certified.
       * the type contains `NEW_VIEW`, `PREPARE`
       * </pre>
       *
       * <code>optional .pb.QCState Type = 3;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.QCState getType() {
        return instance.getType();
      }
      /**
       * <pre>
       * The current type of this QC certified.
       * the type contains `NEW_VIEW`, `PREPARE`
       * </pre>
       *
       * <code>optional .pb.QCState Type = 3;</code>
       */
      public Builder setType(com.bsnbase.sdk.util.pb.Chainedbft.QCState value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       * The current type of this QC certified.
       * the type contains `NEW_VIEW`, `PREPARE`
       * </pre>
       *
       * <code>optional .pb.QCState Type = 3;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       * The view number of this QC certified.
       * </pre>
       *
       * <code>optional int64 ViewNumber = 4;</code>
       */
      public long getViewNumber() {
        return instance.getViewNumber();
      }
      /**
       * <pre>
       * The view number of this QC certified.
       * </pre>
       *
       * <code>optional int64 ViewNumber = 4;</code>
       */
      public Builder setViewNumber(long value) {
        copyOnWrite();
        instance.setViewNumber(value);
        return this;
      }
      /**
       * <pre>
       * The view number of this QC certified.
       * </pre>
       *
       * <code>optional int64 ViewNumber = 4;</code>
       */
      public Builder clearViewNumber() {
        copyOnWrite();
        instance.clearViewNumber();
        return this;
      }

      /**
       * <pre>
       * SignInfos is the signs of the leader gathered from replicas
       * of a specifically certType.
       * </pre>
       *
       * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
       */
      public boolean hasSignInfos() {
        return instance.hasSignInfos();
      }
      /**
       * <pre>
       * SignInfos is the signs of the leader gathered from replicas
       * of a specifically certType.
       * </pre>
       *
       * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos getSignInfos() {
        return instance.getSignInfos();
      }
      /**
       * <pre>
       * SignInfos is the signs of the leader gathered from replicas
       * of a specifically certType.
       * </pre>
       *
       * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
       */
      public Builder setSignInfos(com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos value) {
        copyOnWrite();
        instance.setSignInfos(value);
        return this;
        }
      /**
       * <pre>
       * SignInfos is the signs of the leader gathered from replicas
       * of a specifically certType.
       * </pre>
       *
       * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
       */
      public Builder setSignInfos(
          com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.Builder builderForValue) {
        copyOnWrite();
        instance.setSignInfos(builderForValue);
        return this;
      }
      /**
       * <pre>
       * SignInfos is the signs of the leader gathered from replicas
       * of a specifically certType.
       * </pre>
       *
       * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
       */
      public Builder mergeSignInfos(com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos value) {
        copyOnWrite();
        instance.mergeSignInfos(value);
        return this;
      }
      /**
       * <pre>
       * SignInfos is the signs of the leader gathered from replicas
       * of a specifically certType.
       * </pre>
       *
       * <code>optional .pb.QCSignInfos SignInfos = 5;</code>
       */
      public Builder clearSignInfos() {  copyOnWrite();
        instance.clearSignInfos();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.QuorumCert)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert other = (com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert) arg1;
          proposalId_ = visitor.visitByteString(proposalId_ != com.google.protobuf.ByteString.EMPTY, proposalId_,
              other.proposalId_ != com.google.protobuf.ByteString.EMPTY, other.proposalId_);
          proposalMsg_ = visitor.visitByteString(proposalMsg_ != com.google.protobuf.ByteString.EMPTY, proposalMsg_,
              other.proposalMsg_ != com.google.protobuf.ByteString.EMPTY, other.proposalMsg_);
          type_ = visitor.visitInt(type_ != 0, type_,    other.type_ != 0, other.type_);
          viewNumber_ = visitor.visitLong(viewNumber_ != 0L, viewNumber_,
              other.viewNumber_ != 0L, other.viewNumber_);
          signInfos_ = visitor.visitMessage(signInfos_, other.signInfos_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  proposalId_ = input.readBytes();
                  break;
                }
                case 18: {

                  proposalMsg_ = input.readBytes();
                  break;
                }
                case 24: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
                case 32: {

                  viewNumber_ = input.readInt64();
                  break;
                }
                case 42: {
                  com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.Builder subBuilder = null;
                  if (signInfos_ != null) {
                    subBuilder = signInfos_.toBuilder();
                  }
                  signInfos_ = input.readMessage(com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(signInfos_);
                    signInfos_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pb.QuorumCert)
    private static final com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new QuorumCert();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<QuorumCert> PARSER;

    public static com.google.protobuf.Parser<QuorumCert> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface QCSignInfosOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.QCSignInfos)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    java.util.List<com.bsnbase.sdk.util.pb.Chainedbft.SignInfo> 
        getQCSignInfosList();
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getQCSignInfos(int index);
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    int getQCSignInfosCount();
  }
  /**
   * <pre>
   * QCSignInfos is the signs of the leader gathered from replicas of a specifically certType.
   * A slice of signs is used at present.
   * TODO &#64;qizheng09: It will be change to Threshold-Signatures after 
   * Crypto lib support Threshold-Signatures.
   * </pre>
   *
   * Protobuf type {@code pb.QCSignInfos}
   */
  public  static final class QCSignInfos extends
      com.google.protobuf.GeneratedMessageLite<
          QCSignInfos, QCSignInfos.Builder> implements
      // @@protoc_insertion_point(message_implements:pb.QCSignInfos)
      QCSignInfosOrBuilder {
    private QCSignInfos() {
      qCSignInfos_ = emptyProtobufList();
    }
    public static final int QCSIGNINFOS_FIELD_NUMBER = 1;
    private com.google.protobuf.Internal.ProtobufList<com.bsnbase.sdk.util.pb.Chainedbft.SignInfo> qCSignInfos_;
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    public java.util.List<com.bsnbase.sdk.util.pb.Chainedbft.SignInfo> getQCSignInfosList() {
      return qCSignInfos_;
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    public java.util.List<? extends com.bsnbase.sdk.util.pb.Chainedbft.SignInfoOrBuilder> 
        getQCSignInfosOrBuilderList() {
      return qCSignInfos_;
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    public int getQCSignInfosCount() {
      return qCSignInfos_.size();
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getQCSignInfos(int index) {
      return qCSignInfos_.get(index);
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.SignInfoOrBuilder getQCSignInfosOrBuilder(
        int index) {
      return qCSignInfos_.get(index);
    }
    private void ensureQCSignInfosIsMutable() {
      if (!qCSignInfos_.isModifiable()) {
        qCSignInfos_ =
            com.google.protobuf.GeneratedMessageLite.mutableCopy(qCSignInfos_);
       }
    }

    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void setQCSignInfos(
        int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureQCSignInfosIsMutable();
      qCSignInfos_.set(index, value);
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void setQCSignInfos(
        int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
      ensureQCSignInfosIsMutable();
      qCSignInfos_.set(index, builderForValue.build());
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void addQCSignInfos(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureQCSignInfosIsMutable();
      qCSignInfos_.add(value);
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void addQCSignInfos(
        int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      ensureQCSignInfosIsMutable();
      qCSignInfos_.add(index, value);
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void addQCSignInfos(
        com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
      ensureQCSignInfosIsMutable();
      qCSignInfos_.add(builderForValue.build());
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void addQCSignInfos(
        int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
      ensureQCSignInfosIsMutable();
      qCSignInfos_.add(index, builderForValue.build());
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void addAllQCSignInfos(
        Iterable<? extends com.bsnbase.sdk.util.pb.Chainedbft.SignInfo> values) {
      ensureQCSignInfosIsMutable();
      com.google.protobuf.AbstractMessageLite.addAll(
          values, qCSignInfos_);
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void clearQCSignInfos() {
      qCSignInfos_ = emptyProtobufList();
    }
    /**
     * <pre>
     * QCSignInfos 
     * </pre>
     *
     * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
     */
    private void removeQCSignInfos(int index) {
      ensureQCSignInfosIsMutable();
      qCSignInfos_.remove(index);
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      for (int i = 0; i < qCSignInfos_.size(); i++) {
        output.writeMessage(1, qCSignInfos_.get(i));
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      for (int i = 0; i < qCSignInfos_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, qCSignInfos_.get(i));
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * QCSignInfos is the signs of the leader gathered from replicas of a specifically certType.
     * A slice of signs is used at present.
     * TODO &#64;qizheng09: It will be change to Threshold-Signatures after 
     * Crypto lib support Threshold-Signatures.
     * </pre>
     *
     * Protobuf type {@code pb.QCSignInfos}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos, Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.QCSignInfos)
        com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfosOrBuilder {
      // Construct using com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public java.util.List<com.bsnbase.sdk.util.pb.Chainedbft.SignInfo> getQCSignInfosList() {
        return java.util.Collections.unmodifiableList(
            instance.getQCSignInfosList());
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public int getQCSignInfosCount() {
        return instance.getQCSignInfosCount();
      }/**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getQCSignInfos(int index) {
        return instance.getQCSignInfos(index);
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder setQCSignInfos(
          int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
        copyOnWrite();
        instance.setQCSignInfos(index, value);
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder setQCSignInfos(
          int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setQCSignInfos(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder addQCSignInfos(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
        copyOnWrite();
        instance.addQCSignInfos(value);
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder addQCSignInfos(
          int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
        copyOnWrite();
        instance.addQCSignInfos(index, value);
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder addQCSignInfos(
          com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addQCSignInfos(builderForValue);
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder addQCSignInfos(
          int index, com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
        copyOnWrite();
        instance.addQCSignInfos(index, builderForValue);
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder addAllQCSignInfos(
          Iterable<? extends com.bsnbase.sdk.util.pb.Chainedbft.SignInfo> values) {
        copyOnWrite();
        instance.addAllQCSignInfos(values);
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder clearQCSignInfos() {
        copyOnWrite();
        instance.clearQCSignInfos();
        return this;
      }
      /**
       * <pre>
       * QCSignInfos 
       * </pre>
       *
       * <code>repeated .pb.SignInfo QCSignInfos = 1;</code>
       */
      public Builder removeQCSignInfos(int index) {
        copyOnWrite();
        instance.removeQCSignInfos(index);
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.QCSignInfos)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          qCSignInfos_.makeImmutable();
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos other = (com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos) arg1;
          qCSignInfos_= visitor.visitList(qCSignInfos_, other.qCSignInfos_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  if (!qCSignInfos_.isModifiable()) {
                    qCSignInfos_ =
                        com.google.protobuf.GeneratedMessageLite.mutableCopy(qCSignInfos_);
                  }
                  qCSignInfos_.add(
                      input.readMessage(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.parser(), extensionRegistry));
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pb.QCSignInfos)
    private static final com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new QCSignInfos();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.QCSignInfos getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<QCSignInfos> PARSER;

    public static com.google.protobuf.Parser<QCSignInfos> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface SignInfoOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.SignInfo)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <code>optional string Address = 1;</code>
     */
    String getAddress();
    /**
     * <code>optional string Address = 1;</code>
     */
    com.google.protobuf.ByteString
        getAddressBytes();

    /**
     * <code>optional string PublicKey = 2;</code>
     */
    String getPublicKey();
    /**
     * <code>optional string PublicKey = 2;</code>
     */
    com.google.protobuf.ByteString
        getPublicKeyBytes();

    /**
     * <code>optional bytes Sign = 3;</code>
     */
    com.google.protobuf.ByteString getSign();
  }
  /**
   * <pre>
   * SignInfo is the signature information of the 
   * </pre>
   *
   * Protobuf type {@code pb.SignInfo}
   */
  public  static final class SignInfo extends
      com.google.protobuf.GeneratedMessageLite<
          SignInfo, SignInfo.Builder> implements
      // @@protoc_insertion_point(message_implements:pb.SignInfo)
      SignInfoOrBuilder {
    private SignInfo() {
      address_ = "";
      publicKey_ = "";
      sign_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private String address_;
    /**
     * <code>optional string Address = 1;</code>
     */
    public String getAddress() {
      return address_;
    }
    /**
     * <code>optional string Address = 1;</code>
     */
    public com.google.protobuf.ByteString
        getAddressBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(address_);
    }
    /**
     * <code>optional string Address = 1;</code>
     */
    private void setAddress(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      address_ = value;
    }
    /**
     * <code>optional string Address = 1;</code>
     */
    private void clearAddress() {
      
      address_ = getDefaultInstance().getAddress();
    }
    /**
     * <code>optional string Address = 1;</code>
     */
    private void setAddressBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      address_ = value.toStringUtf8();
    }

    public static final int PUBLICKEY_FIELD_NUMBER = 2;
    private String publicKey_;
    /**
     * <code>optional string PublicKey = 2;</code>
     */
    public String getPublicKey() {
      return publicKey_;
    }
    /**
     * <code>optional string PublicKey = 2;</code>
     */
    public com.google.protobuf.ByteString
        getPublicKeyBytes() {
      return com.google.protobuf.ByteString.copyFromUtf8(publicKey_);
    }
    /**
     * <code>optional string PublicKey = 2;</code>
     */
    private void setPublicKey(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      publicKey_ = value;
    }
    /**
     * <code>optional string PublicKey = 2;</code>
     */
    private void clearPublicKey() {
      
      publicKey_ = getDefaultInstance().getPublicKey();
    }
    /**
     * <code>optional string PublicKey = 2;</code>
     */
    private void setPublicKeyBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      publicKey_ = value.toStringUtf8();
    }

    public static final int SIGN_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString sign_;
    /**
     * <code>optional bytes Sign = 3;</code>
     */
    public com.google.protobuf.ByteString getSign() {
      return sign_;
    }
    /**
     * <code>optional bytes Sign = 3;</code>
     */
    private void setSign(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      sign_ = value;
    }
    /**
     * <code>optional bytes Sign = 3;</code>
     */
    private void clearSign() {
      
      sign_ = getDefaultInstance().getSign();
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!address_.isEmpty()) {
        output.writeString(1, getAddress());
      }
      if (!publicKey_.isEmpty()) {
        output.writeString(2, getPublicKey());
      }
      if (!sign_.isEmpty()) {
        output.writeBytes(3, sign_);
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!address_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(1, getAddress());
      }
      if (!publicKey_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeStringSize(2, getPublicKey());
      }
      if (!sign_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, sign_);
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * SignInfo is the signature information of the 
     * </pre>
     *
     * Protobuf type {@code pb.SignInfo}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.bsnbase.sdk.util.pb.Chainedbft.SignInfo, Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.SignInfo)
        com.bsnbase.sdk.util.pb.Chainedbft.SignInfoOrBuilder {
      // Construct using com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <code>optional string Address = 1;</code>
       */
      public String getAddress() {
        return instance.getAddress();
      }
      /**
       * <code>optional string Address = 1;</code>
       */
      public com.google.protobuf.ByteString
          getAddressBytes() {
        return instance.getAddressBytes();
      }
      /**
       * <code>optional string Address = 1;</code>
       */
      public Builder setAddress(
          String value) {
        copyOnWrite();
        instance.setAddress(value);
        return this;
      }
      /**
       * <code>optional string Address = 1;</code>
       */
      public Builder clearAddress() {
        copyOnWrite();
        instance.clearAddress();
        return this;
      }
      /**
       * <code>optional string Address = 1;</code>
       */
      public Builder setAddressBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setAddressBytes(value);
        return this;
      }

      /**
       * <code>optional string PublicKey = 2;</code>
       */
      public String getPublicKey() {
        return instance.getPublicKey();
      }
      /**
       * <code>optional string PublicKey = 2;</code>
       */
      public com.google.protobuf.ByteString
          getPublicKeyBytes() {
        return instance.getPublicKeyBytes();
      }
      /**
       * <code>optional string PublicKey = 2;</code>
       */
      public Builder setPublicKey(
          String value) {
        copyOnWrite();
        instance.setPublicKey(value);
        return this;
      }
      /**
       * <code>optional string PublicKey = 2;</code>
       */
      public Builder clearPublicKey() {
        copyOnWrite();
        instance.clearPublicKey();
        return this;
      }
      /**
       * <code>optional string PublicKey = 2;</code>
       */
      public Builder setPublicKeyBytes(
          com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setPublicKeyBytes(value);
        return this;
      }

      /**
       * <code>optional bytes Sign = 3;</code>
       */
      public com.google.protobuf.ByteString getSign() {
        return instance.getSign();
      }
      /**
       * <code>optional bytes Sign = 3;</code>
       */
      public Builder setSign(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setSign(value);
        return this;
      }
      /**
       * <code>optional bytes Sign = 3;</code>
       */
      public Builder clearSign() {
        copyOnWrite();
        instance.clearSign();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.SignInfo)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.bsnbase.sdk.util.pb.Chainedbft.SignInfo();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.bsnbase.sdk.util.pb.Chainedbft.SignInfo other = (com.bsnbase.sdk.util.pb.Chainedbft.SignInfo) arg1;
          address_ = visitor.visitString(!address_.isEmpty(), address_,
              !other.address_.isEmpty(), other.address_);
          publicKey_ = visitor.visitString(!publicKey_.isEmpty(), publicKey_,
              !other.publicKey_.isEmpty(), other.publicKey_);
          sign_ = visitor.visitByteString(sign_ != com.google.protobuf.ByteString.EMPTY, sign_,
              other.sign_ != com.google.protobuf.ByteString.EMPTY, other.sign_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {
                  String s = input.readStringRequireUtf8();

                  address_ = s;
                  break;
                }
                case 18: {
                  String s = input.readStringRequireUtf8();

                  publicKey_ = s;
                  break;
                }
                case 26: {

                  sign_ = input.readBytes();
                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pb.SignInfo)
    private static final com.bsnbase.sdk.util.pb.Chainedbft.SignInfo DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new SignInfo();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<SignInfo> PARSER;

    public static com.google.protobuf.Parser<SignInfo> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChainedBftPhaseMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.ChainedBftPhaseMessage)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
     * </pre>
     *
     * <code>optional .pb.QCState Type = 1;</code>
     */
    int getTypeValue();
    /**
     * <pre>
     * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
     * </pre>
     *
     * <code>optional .pb.QCState Type = 1;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.QCState getType();

    /**
     * <pre>
     * ViewNumber the current view number 
     * </pre>
     *
     * <code>optional int64 ViewNumber = 2;</code>
     */
    long getViewNumber();

    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    boolean hasProposalQC();
    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert getProposalQC();

    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    boolean hasJustifyQC();
    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert getJustifyQC();

    /**
     * <pre>
     * MsgDigest is the digest of the msgg
     * </pre>
     *
     * <code>optional bytes MsgDigest = 5;</code>
     */
    com.google.protobuf.ByteString getMsgDigest();

    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    boolean hasSignature();
    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getSignature();
  }
  /**
   * <pre>
   * ChainedBftPhaseMessage is the proposal message of the protocal.
   * In Hotstuff, there are two kinds of messages, "NEW_VIEW_MESSAGE" and "QC_Message".
   * A stable leader can skip this "NEW_VIEW_MESSAGE".
   * </pre>
   *
   * Protobuf type {@code pb.ChainedBftPhaseMessage}
   */
  public  static final class ChainedBftPhaseMessage extends
      com.google.protobuf.GeneratedMessageLite<
          ChainedBftPhaseMessage, ChainedBftPhaseMessage.Builder> implements
      // @@protoc_insertion_point(message_implements:pb.ChainedBftPhaseMessage)
      ChainedBftPhaseMessageOrBuilder {
    private ChainedBftPhaseMessage() {
      msgDigest_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <pre>
     * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
     * </pre>
     *
     * <code>optional .pb.QCState Type = 1;</code>
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <pre>
     * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
     * </pre>
     *
     * <code>optional .pb.QCState Type = 1;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.QCState getType() {
      com.bsnbase.sdk.util.pb.Chainedbft.QCState result = com.bsnbase.sdk.util.pb.Chainedbft.QCState.forNumber(type_);
      return result == null ? com.bsnbase.sdk.util.pb.Chainedbft.QCState.UNRECOGNIZED : result;
    }
    /**
     * <pre>
     * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
     * </pre>
     *
     * <code>optional .pb.QCState Type = 1;</code>
     */
    private void setTypeValue(int value) {
        type_ = value;
    }
    /**
     * <pre>
     * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
     * </pre>
     *
     * <code>optional .pb.QCState Type = 1;</code>
     */
    private void setType(com.bsnbase.sdk.util.pb.Chainedbft.QCState value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      type_ = value.getNumber();
    }
    /**
     * <pre>
     * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
     * </pre>
     *
     * <code>optional .pb.QCState Type = 1;</code>
     */
    private void clearType() {
      
      type_ = 0;
    }

    public static final int VIEWNUMBER_FIELD_NUMBER = 2;
    private long viewNumber_;
    /**
     * <pre>
     * ViewNumber the current view number 
     * </pre>
     *
     * <code>optional int64 ViewNumber = 2;</code>
     */
    public long getViewNumber() {
      return viewNumber_;
    }
    /**
     * <pre>
     * ViewNumber the current view number 
     * </pre>
     *
     * <code>optional int64 ViewNumber = 2;</code>
     */
    private void setViewNumber(long value) {
      
      viewNumber_ = value;
    }
    /**
     * <pre>
     * ViewNumber the current view number 
     * </pre>
     *
     * <code>optional int64 ViewNumber = 2;</code>
     */
    private void clearViewNumber() {
      
      viewNumber_ = 0L;
    }

    public static final int PROPOSALQC_FIELD_NUMBER = 3;
    private com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert proposalQC_;
    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    public boolean hasProposalQC() {
      return proposalQC_ != null;
    }
    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert getProposalQC() {
      return proposalQC_ == null ? com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.getDefaultInstance() : proposalQC_;
    }
    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    private void setProposalQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
      if (value == null) {
        throw new NullPointerException();
      }
      proposalQC_ = value;
      
      }
    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    private void setProposalQC(
        com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.Builder builderForValue) {
      proposalQC_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    private void mergeProposalQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
      if (proposalQC_ != null &&
          proposalQC_ != com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.getDefaultInstance()) {
        proposalQC_ =
          com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.newBuilder(proposalQC_).mergeFrom(value).buildPartial();
      } else {
        proposalQC_ = value;
      }
      
    }
    /**
     * <pre>
     * The new proposal send to other replicas while the 
     * </pre>
     *
     * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
     */
    private void clearProposalQC() {  proposalQC_ = null;
      
    }

    public static final int JUSTIFYQC_FIELD_NUMBER = 4;
    private com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert justifyQC_;
    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    public boolean hasJustifyQC() {
      return justifyQC_ != null;
    }
    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert getJustifyQC() {
      return justifyQC_ == null ? com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.getDefaultInstance() : justifyQC_;
    }
    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    private void setJustifyQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
      if (value == null) {
        throw new NullPointerException();
      }
      justifyQC_ = value;
      
      }
    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    private void setJustifyQC(
        com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.Builder builderForValue) {
      justifyQC_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    private void mergeJustifyQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
      if (justifyQC_ != null &&
          justifyQC_ != com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.getDefaultInstance()) {
        justifyQC_ =
          com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.newBuilder(justifyQC_).mergeFrom(value).buildPartial();
      } else {
        justifyQC_ = value;
      }
      
    }
    /**
     * <pre>
     * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
     * </pre>
     *
     * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
     */
    private void clearJustifyQC() {  justifyQC_ = null;
      
    }

    public static final int MSGDIGEST_FIELD_NUMBER = 5;
    private com.google.protobuf.ByteString msgDigest_;
    /**
     * <pre>
     * MsgDigest is the digest of the msgg
     * </pre>
     *
     * <code>optional bytes MsgDigest = 5;</code>
     */
    public com.google.protobuf.ByteString getMsgDigest() {
      return msgDigest_;
    }
    /**
     * <pre>
     * MsgDigest is the digest of the msgg
     * </pre>
     *
     * <code>optional bytes MsgDigest = 5;</code>
     */
    private void setMsgDigest(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      msgDigest_ = value;
    }
    /**
     * <pre>
     * MsgDigest is the digest of the msgg
     * </pre>
     *
     * <code>optional bytes MsgDigest = 5;</code>
     */
    private void clearMsgDigest() {
      
      msgDigest_ = getDefaultInstance().getMsgDigest();
    }

    public static final int SIGNATURE_FIELD_NUMBER = 6;
    private com.bsnbase.sdk.util.pb.Chainedbft.SignInfo signature_;
    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    public boolean hasSignature() {
      return signature_ != null;
    }
    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getSignature() {
      return signature_ == null ? com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.getDefaultInstance() : signature_;
    }
    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    private void setSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      signature_ = value;
      
      }
    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    private void setSignature(
        com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
      signature_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    private void mergeSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
      if (signature_ != null &&
          signature_ != com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.getDefaultInstance()) {
        signature_ =
          com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.newBuilder(signature_).mergeFrom(value).buildPartial();
      } else {
        signature_ = value;
      }
      
    }
    /**
     * <pre>
     * Signature for this msg
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 6;</code>
     */
    private void clearSignature() {  signature_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != com.bsnbase.sdk.util.pb.Chainedbft.QCState.NEW_VIEW.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (viewNumber_ != 0L) {
        output.writeInt64(2, viewNumber_);
      }
      if (proposalQC_ != null) {
        output.writeMessage(3, getProposalQC());
      }
      if (justifyQC_ != null) {
        output.writeMessage(4, getJustifyQC());
      }
      if (!msgDigest_.isEmpty()) {
        output.writeBytes(5, msgDigest_);
      }
      if (signature_ != null) {
        output.writeMessage(6, getSignature());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != com.bsnbase.sdk.util.pb.Chainedbft.QCState.NEW_VIEW.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (viewNumber_ != 0L) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt64Size(2, viewNumber_);
      }
      if (proposalQC_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getProposalQC());
      }
      if (justifyQC_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getJustifyQC());
      }
      if (!msgDigest_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(5, msgDigest_);
      }
      if (signature_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, getSignature());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * ChainedBftPhaseMessage is the proposal message of the protocal.
     * In Hotstuff, there are two kinds of messages, "NEW_VIEW_MESSAGE" and "QC_Message".
     * A stable leader can skip this "NEW_VIEW_MESSAGE".
     * </pre>
     *
     * Protobuf type {@code pb.ChainedBftPhaseMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage, Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.ChainedBftPhaseMessage)
        com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessageOrBuilder {
      // Construct using com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
       * </pre>
       *
       * <code>optional .pb.QCState Type = 1;</code>
       */
      public int getTypeValue() {
        return instance.getTypeValue();
      }
      /**
       * <pre>
       * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
       * </pre>
       *
       * <code>optional .pb.QCState Type = 1;</code>
       */
      public Builder setTypeValue(int value) {
        copyOnWrite();
        instance.setTypeValue(value);
        return this;
      }
      /**
       * <pre>
       * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
       * </pre>
       *
       * <code>optional .pb.QCState Type = 1;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.QCState getType() {
        return instance.getType();
      }
      /**
       * <pre>
       * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
       * </pre>
       *
       * <code>optional .pb.QCState Type = 1;</code>
       */
      public Builder setType(com.bsnbase.sdk.util.pb.Chainedbft.QCState value) {
        copyOnWrite();
        instance.setType(value);
        return this;
      }
      /**
       * <pre>
       * Message Type: NEW_VIEW_MESSAGE or QC_MESSAGE
       * </pre>
       *
       * <code>optional .pb.QCState Type = 1;</code>
       */
      public Builder clearType() {
        copyOnWrite();
        instance.clearType();
        return this;
      }

      /**
       * <pre>
       * ViewNumber the current view number 
       * </pre>
       *
       * <code>optional int64 ViewNumber = 2;</code>
       */
      public long getViewNumber() {
        return instance.getViewNumber();
      }
      /**
       * <pre>
       * ViewNumber the current view number 
       * </pre>
       *
       * <code>optional int64 ViewNumber = 2;</code>
       */
      public Builder setViewNumber(long value) {
        copyOnWrite();
        instance.setViewNumber(value);
        return this;
      }
      /**
       * <pre>
       * ViewNumber the current view number 
       * </pre>
       *
       * <code>optional int64 ViewNumber = 2;</code>
       */
      public Builder clearViewNumber() {
        copyOnWrite();
        instance.clearViewNumber();
        return this;
      }

      /**
       * <pre>
       * The new proposal send to other replicas while the 
       * </pre>
       *
       * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
       */
      public boolean hasProposalQC() {
        return instance.hasProposalQC();
      }
      /**
       * <pre>
       * The new proposal send to other replicas while the 
       * </pre>
       *
       * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert getProposalQC() {
        return instance.getProposalQC();
      }
      /**
       * <pre>
       * The new proposal send to other replicas while the 
       * </pre>
       *
       * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
       */
      public Builder setProposalQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
        copyOnWrite();
        instance.setProposalQC(value);
        return this;
        }
      /**
       * <pre>
       * The new proposal send to other replicas while the 
       * </pre>
       *
       * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
       */
      public Builder setProposalQC(
          com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.Builder builderForValue) {
        copyOnWrite();
        instance.setProposalQC(builderForValue);
        return this;
      }
      /**
       * <pre>
       * The new proposal send to other replicas while the 
       * </pre>
       *
       * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
       */
      public Builder mergeProposalQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
        copyOnWrite();
        instance.mergeProposalQC(value);
        return this;
      }
      /**
       * <pre>
       * The new proposal send to other replicas while the 
       * </pre>
       *
       * <code>optional .pb.QuorumCert ProposalQC = 3;</code>
       */
      public Builder clearProposalQC() {  copyOnWrite();
        instance.clearProposalQC();
        return this;
      }

      /**
       * <pre>
       * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
       * </pre>
       *
       * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
       */
      public boolean hasJustifyQC() {
        return instance.hasJustifyQC();
      }
      /**
       * <pre>
       * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
       * </pre>
       *
       * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert getJustifyQC() {
        return instance.getJustifyQC();
      }
      /**
       * <pre>
       * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
       * </pre>
       *
       * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
       */
      public Builder setJustifyQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
        copyOnWrite();
        instance.setJustifyQC(value);
        return this;
        }
      /**
       * <pre>
       * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
       * </pre>
       *
       * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
       */
      public Builder setJustifyQC(
          com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.Builder builderForValue) {
        copyOnWrite();
        instance.setJustifyQC(builderForValue);
        return this;
      }
      /**
       * <pre>
       * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
       * </pre>
       *
       * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
       */
      public Builder mergeJustifyQC(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert value) {
        copyOnWrite();
        instance.mergeJustifyQC(value);
        return this;
      }
      /**
       * <pre>
       * JustifyQC is the QC of the leader gathered, send to next leader, while the message type is "NEW_VIEW_MESSAGE"
       * </pre>
       *
       * <code>optional .pb.QuorumCert JustifyQC = 4;</code>
       */
      public Builder clearJustifyQC() {  copyOnWrite();
        instance.clearJustifyQC();
        return this;
      }

      /**
       * <pre>
       * MsgDigest is the digest of the msgg
       * </pre>
       *
       * <code>optional bytes MsgDigest = 5;</code>
       */
      public com.google.protobuf.ByteString getMsgDigest() {
        return instance.getMsgDigest();
      }
      /**
       * <pre>
       * MsgDigest is the digest of the msgg
       * </pre>
       *
       * <code>optional bytes MsgDigest = 5;</code>
       */
      public Builder setMsgDigest(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setMsgDigest(value);
        return this;
      }
      /**
       * <pre>
       * MsgDigest is the digest of the msgg
       * </pre>
       *
       * <code>optional bytes MsgDigest = 5;</code>
       */
      public Builder clearMsgDigest() {
        copyOnWrite();
        instance.clearMsgDigest();
        return this;
      }

      /**
       * <pre>
       * Signature for this msg
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 6;</code>
       */
      public boolean hasSignature() {
        return instance.hasSignature();
      }
      /**
       * <pre>
       * Signature for this msg
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 6;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getSignature() {
        return instance.getSignature();
      }
      /**
       * <pre>
       * Signature for this msg
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 6;</code>
       */
      public Builder setSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
        copyOnWrite();
        instance.setSignature(value);
        return this;
        }
      /**
       * <pre>
       * Signature for this msg
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 6;</code>
       */
      public Builder setSignature(
          com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setSignature(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Signature for this msg
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 6;</code>
       */
      public Builder mergeSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
        copyOnWrite();
        instance.mergeSignature(value);
        return this;
      }
      /**
       * <pre>
       * Signature for this msg
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 6;</code>
       */
      public Builder clearSignature() {  copyOnWrite();
        instance.clearSignature();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.ChainedBftPhaseMessage)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage other = (com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage) arg1;
          type_ = visitor.visitInt(type_ != 0, type_,    other.type_ != 0, other.type_);
          viewNumber_ = visitor.visitLong(viewNumber_ != 0L, viewNumber_,
              other.viewNumber_ != 0L, other.viewNumber_);
          proposalQC_ = visitor.visitMessage(proposalQC_, other.proposalQC_);
          justifyQC_ = visitor.visitMessage(justifyQC_, other.justifyQC_);
          msgDigest_ = visitor.visitByteString(msgDigest_ != com.google.protobuf.ByteString.EMPTY, msgDigest_,
              other.msgDigest_ != com.google.protobuf.ByteString.EMPTY, other.msgDigest_);
          signature_ = visitor.visitMessage(signature_, other.signature_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 8: {
                  int rawValue = input.readEnum();

                  type_ = rawValue;
                  break;
                }
                case 16: {

                  viewNumber_ = input.readInt64();
                  break;
                }
                case 26: {
                  com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.Builder subBuilder = null;
                  if (proposalQC_ != null) {
                    subBuilder = proposalQC_.toBuilder();
                  }
                  proposalQC_ = input.readMessage(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(proposalQC_);
                    proposalQC_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 34: {
                  com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.Builder subBuilder = null;
                  if (justifyQC_ != null) {
                    subBuilder = justifyQC_.toBuilder();
                  }
                  justifyQC_ = input.readMessage(com.bsnbase.sdk.util.pb.Chainedbft.QuorumCert.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(justifyQC_);
                    justifyQC_ = subBuilder.buildPartial();
                  }

                  break;
                }
                case 42: {

                  msgDigest_ = input.readBytes();
                  break;
                }
                case 50: {
                  com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder subBuilder = null;
                  if (signature_ != null) {
                    subBuilder = signature_.toBuilder();
                  }
                  signature_ = input.readMessage(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(signature_);
                    signature_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pb.ChainedBftPhaseMessage)
    private static final com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChainedBftPhaseMessage();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftPhaseMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChainedBftPhaseMessage> PARSER;

    public static com.google.protobuf.Parser<ChainedBftPhaseMessage> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }

  public interface ChainedBftVoteMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:pb.ChainedBftVoteMessage)
      com.google.protobuf.MessageLiteOrBuilder {

    /**
     * <pre>
     * The id of this message votes for.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    com.google.protobuf.ByteString getProposalId();

    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    boolean hasSignature();
    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getSignature();
  }
  /**
   * <pre>
   * ChainedBftVoteMessage is the vote message of the protocal.
   * </pre>
   *
   * Protobuf type {@code pb.ChainedBftVoteMessage}
   */
  public  static final class ChainedBftVoteMessage extends
      com.google.protobuf.GeneratedMessageLite<
          ChainedBftVoteMessage, ChainedBftVoteMessage.Builder> implements
      // @@protoc_insertion_point(message_implements:pb.ChainedBftVoteMessage)
      ChainedBftVoteMessageOrBuilder {
    private ChainedBftVoteMessage() {
      proposalId_ = com.google.protobuf.ByteString.EMPTY;
    }
    public static final int PROPOSALID_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString proposalId_;
    /**
     * <pre>
     * The id of this message votes for.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    public com.google.protobuf.ByteString getProposalId() {
      return proposalId_;
    }
    /**
     * <pre>
     * The id of this message votes for.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    private void setProposalId(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      proposalId_ = value;
    }
    /**
     * <pre>
     * The id of this message votes for.
     * </pre>
     *
     * <code>optional bytes ProposalId = 1;</code>
     */
    private void clearProposalId() {
      
      proposalId_ = getDefaultInstance().getProposalId();
    }

    public static final int SIGNATURE_FIELD_NUMBER = 2;
    private com.bsnbase.sdk.util.pb.Chainedbft.SignInfo signature_;
    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    public boolean hasSignature() {
      return signature_ != null;
    }
    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    public com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getSignature() {
      return signature_ == null ? com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.getDefaultInstance() : signature_;
    }
    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    private void setSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      signature_ = value;
      
      }
    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    private void setSignature(
        com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
      signature_ = builderForValue.build();
      
    }
    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    private void mergeSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
      if (signature_ != null &&
          signature_ != com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.getDefaultInstance()) {
        signature_ =
          com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.newBuilder(signature_).mergeFrom(value).buildPartial();
      } else {
        signature_ = value;
      }
      
    }
    /**
     * <pre>
     * Replica will sign the QCMessage if the QuorumCert if valid.
     * </pre>
     *
     * <code>optional .pb.SignInfo Signature = 2;</code>
     */
    private void clearSignature() {  signature_ = null;
      
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!proposalId_.isEmpty()) {
        output.writeBytes(1, proposalId_);
      }
      if (signature_ != null) {
        output.writeMessage(2, getSignature());
      }
    }

    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (!proposalId_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, proposalId_);
      }
      if (signature_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, getSignature());
      }
      memoizedSerializedSize = size;
      return size;
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, data, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return parseDelimitedFrom(DEFAULT_INSTANCE, input, extensionRegistry);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input);
    }
    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageLite.parseFrom(
          DEFAULT_INSTANCE, input, extensionRegistry);
    }

    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }

    /**
     * <pre>
     * ChainedBftVoteMessage is the vote message of the protocal.
     * </pre>
     *
     * Protobuf type {@code pb.ChainedBftVoteMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageLite.Builder<
          com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage, Builder> implements
        // @@protoc_insertion_point(builder_implements:pb.ChainedBftVoteMessage)
        com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessageOrBuilder {
      // Construct using com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage.newBuilder()
      private Builder() {
        super(DEFAULT_INSTANCE);
      }


      /**
       * <pre>
       * The id of this message votes for.
       * </pre>
       *
       * <code>optional bytes ProposalId = 1;</code>
       */
      public com.google.protobuf.ByteString getProposalId() {
        return instance.getProposalId();
      }
      /**
       * <pre>
       * The id of this message votes for.
       * </pre>
       *
       * <code>optional bytes ProposalId = 1;</code>
       */
      public Builder setProposalId(com.google.protobuf.ByteString value) {
        copyOnWrite();
        instance.setProposalId(value);
        return this;
      }
      /**
       * <pre>
       * The id of this message votes for.
       * </pre>
       *
       * <code>optional bytes ProposalId = 1;</code>
       */
      public Builder clearProposalId() {
        copyOnWrite();
        instance.clearProposalId();
        return this;
      }

      /**
       * <pre>
       * Replica will sign the QCMessage if the QuorumCert if valid.
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 2;</code>
       */
      public boolean hasSignature() {
        return instance.hasSignature();
      }
      /**
       * <pre>
       * Replica will sign the QCMessage if the QuorumCert if valid.
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 2;</code>
       */
      public com.bsnbase.sdk.util.pb.Chainedbft.SignInfo getSignature() {
        return instance.getSignature();
      }
      /**
       * <pre>
       * Replica will sign the QCMessage if the QuorumCert if valid.
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 2;</code>
       */
      public Builder setSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
        copyOnWrite();
        instance.setSignature(value);
        return this;
        }
      /**
       * <pre>
       * Replica will sign the QCMessage if the QuorumCert if valid.
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 2;</code>
       */
      public Builder setSignature(
          com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder builderForValue) {
        copyOnWrite();
        instance.setSignature(builderForValue);
        return this;
      }
      /**
       * <pre>
       * Replica will sign the QCMessage if the QuorumCert if valid.
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 2;</code>
       */
      public Builder mergeSignature(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo value) {
        copyOnWrite();
        instance.mergeSignature(value);
        return this;
      }
      /**
       * <pre>
       * Replica will sign the QCMessage if the QuorumCert if valid.
       * </pre>
       *
       * <code>optional .pb.SignInfo Signature = 2;</code>
       */
      public Builder clearSignature() {  copyOnWrite();
        instance.clearSignature();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:pb.ChainedBftVoteMessage)
    }
    protected final Object dynamicMethod(
        MethodToInvoke method,
        Object arg0, Object arg1) {
      switch (method) {
        case NEW_MUTABLE_INSTANCE: {
          return new com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage();
        }
        case IS_INITIALIZED: {
          return DEFAULT_INSTANCE;
        }
        case MAKE_IMMUTABLE: {
          return null;
        }
        case NEW_BUILDER: {
          return new Builder();
        }
        case VISIT: {
          Visitor visitor = (Visitor) arg0;
          com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage other = (com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage) arg1;
          proposalId_ = visitor.visitByteString(proposalId_ != com.google.protobuf.ByteString.EMPTY, proposalId_,
              other.proposalId_ != com.google.protobuf.ByteString.EMPTY, other.proposalId_);
          signature_ = visitor.visitMessage(signature_, other.signature_);
          if (visitor == MergeFromVisitor
              .INSTANCE) {
          }
          return this;
        }
        case MERGE_FROM_STREAM: {
          com.google.protobuf.CodedInputStream input =
              (com.google.protobuf.CodedInputStream) arg0;
          com.google.protobuf.ExtensionRegistryLite extensionRegistry =
              (com.google.protobuf.ExtensionRegistryLite) arg1;
          try {
            boolean done = false;
            while (!done) {
              int tag = input.readTag();
              switch (tag) {
                case 0:
                  done = true;
                  break;
                default: {
                  if (!input.skipField(tag)) {
                    done = true;
                  }
                  break;
                }
                case 10: {

                  proposalId_ = input.readBytes();
                  break;
                }
                case 18: {
                  com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.Builder subBuilder = null;
                  if (signature_ != null) {
                    subBuilder = signature_.toBuilder();
                  }
                  signature_ = input.readMessage(com.bsnbase.sdk.util.pb.Chainedbft.SignInfo.parser(), extensionRegistry);
                  if (subBuilder != null) {
                    subBuilder.mergeFrom(signature_);
                    signature_ = subBuilder.buildPartial();
                  }

                  break;
                }
              }
            }
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            throw new RuntimeException(e.setUnfinishedMessage(this));
          } catch (java.io.IOException e) {
            throw new RuntimeException(
                new com.google.protobuf.InvalidProtocolBufferException(
                    e.getMessage()).setUnfinishedMessage(this));
          } finally {
          }
        }
        case GET_DEFAULT_INSTANCE: {
          return DEFAULT_INSTANCE;
        }
        case GET_PARSER: {
          if (PARSER == null) {    synchronized (com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage.class) {
              if (PARSER == null) {
                PARSER = new DefaultInstanceBasedParser(DEFAULT_INSTANCE);
              }
            }
          }
          return PARSER;
        }
      }
      throw new UnsupportedOperationException();
    }


    // @@protoc_insertion_point(class_scope:pb.ChainedBftVoteMessage)
    private static final com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new ChainedBftVoteMessage();
      DEFAULT_INSTANCE.makeImmutable();
    }

    public static com.bsnbase.sdk.util.pb.Chainedbft.ChainedBftVoteMessage getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static volatile com.google.protobuf.Parser<ChainedBftVoteMessage> PARSER;

    public static com.google.protobuf.Parser<ChainedBftVoteMessage> parser() {
      return DEFAULT_INSTANCE.getParserForType();
    }
  }


  static {
  }

  // @@protoc_insertion_point(outer_class_scope)
}
